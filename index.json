{
  "api/CueX.Test.html": {
    "href": "api/CueX.Test.html",
    "title": "Namespace CueX.Test | CueX Documentation",
    "keywords": "Namespace CueX.Test Classes UnitTest1"
  },
  "api/CueX.API.ISpatialGrain-1.html": {
    "href": "api/CueX.API.ISpatialGrain-1.html",
    "title": "Interface ISpatialGrain<T> | CueX Documentation",
    "keywords": "Interface ISpatialGrain<T> Namespace : CueX.API Assembly : CueX.API.dll Syntax public interface ISpatialGrain<T> : IGrainWithIntegerKey where T : struct Type Parameters Name Description T Methods | Improve this Doc View Source GetPosition() Declaration Vector<T> GetPosition() Returns Type Description Vector <T>"
  },
  "api/CueX.Core.Setup.html": {
    "href": "api/CueX.Core.Setup.html",
    "title": "Class Setup | CueX Documentation",
    "keywords": "Class Setup Inheritance System.Object Setup Namespace : CueX.Core Assembly : CueX.Core.dll Syntax public static class Setup : object Methods | Improve this Doc View Source InitializeCommon() Declaration public static void InitializeCommon()"
  },
  "api/CueX.Core.SpatialGrainState-1.html": {
    "href": "api/CueX.Core.SpatialGrainState-1.html",
    "title": "Class SpatialGrainState<TPrecision> | CueX Documentation",
    "keywords": "Class SpatialGrainState<TPrecision> Inheritance System.Object SpatialGrainState<TPrecision> Namespace : CueX.Core Assembly : CueX.Core.dll Syntax public class SpatialGrainState<TPrecision> : object where TPrecision : struct Type Parameters Name Description TPrecision Fields | Improve this Doc View Source Position Declaration public Vector<TPrecision> Position Field Value Type Description Vector <TPrecision>"
  },
  "api/CueX.GridSPS.html": {
    "href": "api/CueX.GridSPS.html",
    "title": "Namespace CueX.GridSPS | CueX Documentation",
    "keywords": "Namespace CueX.GridSPS Classes Class1"
  },
  "api/CueX.Test.Helper.SiloFixture.html": {
    "href": "api/CueX.Test.Helper.SiloFixture.html",
    "title": "Class SiloFixture | CueX Documentation",
    "keywords": "Class SiloFixture Inheritance System.Object SiloFixture Namespace : CueX.Test.Helper Assembly : CueX.Test.dll Syntax public class SiloFixture : IDisposable Constructors | Improve this Doc View Source SiloFixture() Declaration public SiloFixture() Properties | Improve this Doc View Source Silo Declaration public TestKitSilo Silo { get; } Property Value Type Description TestKitSilo Methods | Improve this Doc View Source Dispose() Declaration public void Dispose()"
  },
  "api/CueX.Test.UnitTest1.html": {
    "href": "api/CueX.Test.UnitTest1.html",
    "title": "Class UnitTest1 | CueX Documentation",
    "keywords": "Class UnitTest1 Inheritance System.Object UnitTest1 Namespace : CueX.Test Assembly : CueX.Test.dll Syntax public class UnitTest1 : object Methods | Improve this Doc View Source Test1() Declaration public void Test1()"
  },
  "index.html": {
    "href": "index.html",
    "title": "docfx-seed | CueX Documentation",
    "keywords": "docfx-seed Description This is a sample docfx documentation project. It contains .NET source code and markdown files. docfx.json is the configuration file for running docfx . docfx will generate a static website as similar to http://docascode.github.io/docfx-seed . How to run Under Windows Download and unzip docfx.zip to run docfx.exe directly! Run docfx under current repo! Website will be generated under _site folder. Run any web hosting tool to host _site folder, e.g. docfx serve _site . Cross platform and use dnx As a prerequisite, you will need to install DNVM and DNX . Quick Start dnvm upgrade to get the latest dnvm. Add feed https://www.myget.org/F/aspnetrelease/api/v2/ to Nuget.config For Windows, the nuget config file is %AppData%\\NuGet\\NuGet.config . For Linux/OSX, the nuget config file is ~/.config/NuGet/NuGet.config . ``` dnu commands install docfx to install docfx as a command Run docfx under current repo! Website will be generated under _site folder. Run any web hosting tool to host _site folder, e.g. docfx serve _site . Further information about docfx docfx is a tool to generate documentation towards .NET source code and markdown files. Please refer to docfx to get start. The docfx website itself is generated by docfx !"
  },
  "articles/csharp_coding_standards.html": {
    "href": "articles/csharp_coding_standards.html",
    "title": "C# Coding Standards | CueX Documentation",
    "keywords": "C# Coding Standards Introduction The coding standard will be used in conjunction with customized version of StyleCop and FxCop [ TODO ] during both development and build process. This will help ensure that the standard is followed by all developers on the team in a consistent manner. \"Any fool can write code that a computer can understand. Good programmers write code that humans understand\". Martin Fowler. Refactoring: Improving the design of existing code. Purpose The aim of this section is to define a set of C# coding standards to be used by CAPS build team to guarantee maximum legibility, reliability, re-usability and homogeneity of our code. Each section is marked Mandatory or Recommended . Mandatory sections, will be enforced during code reviews as well as tools like StyleCop and FxCop , and code will not be considered complete until it is compliant. Scope This section contains general C# coding standards which can be applied to any type of application developed in C#, based on Framework Design Guidelines . It does not pretend to be a tutorial on C#. It only includes a set of limitations and recommendations focused on clarifying the development. Tools Resharper is a great 3rd party code cleanup and style tool. StyleCop analyzes C# srouce code to enforce a set of style and consistency rules and has been integrated into many 3rd party development tools such as Resharper. FxCop is an application that analyzes managed code assemblies (code that targets the .NET Framework common language runtime) and reports information about the assemblies, such as possible design, localization, performance, and security improvements. C# Stylizer does many of the style rules automatically Highlights of Coding Standards This section is not intended to give a summary of all the coding standards that enabled by our customized StyleCop, but to give a highlight of some rules one will possibly meet in daily coding life. It also provides some recommended however not mandatory(which means not enabled in StyleCop) coding standards. File Layout (Recommended) Only one public class is allowed per file. The file name is derived from the class name. Class : Observer Filename: Observer.cs Class Definition Order (Mandatory) The class definition contains class members in the following order, from less restricted scope (public) to more restrictive (private): Nested types, e.g. classes, enum, struct, etc. Field members, e.g. member variables, const, etc. Member functions Constructors Finalizer (Do not use unless absolutely necessary) Methods (Properties, Events, Operations, Overridables, Static) Private nested types Naming (Mandatory) DO use PascalCasing for all public member, type, and namespace names consisting of multiple words. PropertyDescriptor HtmlTag IOStream NOTE : A special case is made for two-letter acronyms in which both letters are capitalized, e.g. IOStream DO use camelCasing for parameter names. propertyDescriptor htmlTag ioStream DO start with underscore for private fields private readonly Guid _userId = Guid.NewGuid(); DO start static readonly fields, constants with capitalized case private static readonly IEntityAccessor EntityAccessor = null; private const string MetadataName = \"MetadataName\"; DO NOT capitalize each word in so-called closed-form compound words . DO have \"Async\" explicitly in the Async method name to notice people how to use it properly Formatting (Mandatory) DO use spaces over tabs, and always show all spaces/tabs in IDE Tips Visual Studio > TOOLS > Options > Text Editor > C# > Tabs > Insert spaces (Tab size: 4) Visual Studio > Edit > Advanced > View White Space DO add using inside namespace declaration namespace Microsoft.Content.Build.BuildWorker.UnitTest { using System; } DO add a space when: for (var i = 0; i < 1; i++) if (a == b) Cross-platform coding Our code should supports multiple operating systems. Don't assume we only run (and develop) on Windows. Code should be sensitvie to the differences between OS's. Here are some specifics to consider. DO use Enviroment.NewLine instead of hard-coding the line break instead of \\r\\n , as Windows uses \\r\\n and OSX/Linux uses \\n . Note Be aware that thes line-endings may cause problems in code when using @\"\" text blocks with line breaks. DO Use Path.Combine() or Path.DirectorySeparatorChar to separate directories. If this is not possible (such as in scripting), use a forward slash / . Windows is more forgiving than Linux in this regard. Unit tests and functional tests Assembly naming The unit tests for the Microsoft.Foo assembly live in the Microsoft.Foo.Tests assembly. The functional tests for the Microsoft.Foo assmebly live in the Microsoft.Foo.FunctionalTests assmebly. In general there should be exactly one unit test assebmly for each product runtime assembly. In general there should be one functional test assembly per repo. Exceptions can be made for both. Unit test class naming Test class names end with Test and live in the same namespace as the class being tested. For example, the unit tests for the Microsoft.Foo.Boo class would be in a Microsoft.Foo.Boo class in the test assembly. Unit test method naming Unit test method names must be descriptive about what is being tested, under what conditions, and what the expectations are . Pascal casing and underscores can be used to improve readability. The following test names are correct: PublicApiArgumentsShouldHaveNotNullAnnotation Public_api_arguments_should_have_not_null_annotation The following test names are incorrect: Test1 Constructor FormatString GetData Unit test structure The contents of every unit test should be split into three distinct stages, optionally separated by these comments: // Arrange // Act // Assert The crucial thing here is the Act stage is exactly one statement. That one statement is nothing more than a call to the one method that you are trying to test. keeping that one statement as simple as possible is also very important. For example, this is not ideal: int result = myObj.CallSomeMethod(GetComplexParam1(), GetComplexParam2(), GetComplexParam3()); This style is not recomended because way too many things can go wrong in this one statement. All the GetComplexParamN() calls can throw for a variety of reasons unrelated to the test itself. It is thus unclear to someone running into a problem why the failure occured. The ideal pattern is to move the complex parameter building into the `Arrange section: // Arrange P1 p1 = GetComplexParam1(); P2 p2 = GetComplexParam2(); P3 p3 = GetComplexParam3(); // Act int result = myObj.CallSomeMethod(p1, p2, p3); // Assert Assert.AreEqual(1234, result); Now the only reason the line with CallSomeMethod() can fail is if the method itself blew up. Testing exception messages In general testing the specific exception message in a unit test is important. This ensures that the exact desired exception is what is being tested rather than a different exception of the same type. In order to verify the exact exception it is important to verify the message. var ex = Assert.Throws<InvalidOperationException>( () => fruitBasket.GetBananaById(1234)); Assert.Equal( \"1234\", ex.Message); Use xUnit.net's plethora of built-in assertions xUnit.net includes many kinds of assertions – please use the most appropriate one for your test. This will make the tests a lot more readable and also allow the test runner report the best possible errors (whether it's local or the CI machine). For example, these are bad: Assert.Equal(true, someBool); Assert.True(\"abc123\" == someString); Assert.True(list1.Length == list2.Length); for (int i = 0; i < list1.Length; i++) { Assert.True( String.Equals list1[i], list2[i], StringComparison.OrdinalIgnoreCase)); } These are good: Assert.True(someBool); Assert.Equal(\"abc123\", someString); // built-in collection assertions! Assert.Equal(list1, list2, StringComparer.OrdinalIgnoreCase); Parallel tests By default all unit test assemblies should run in parallel mode, which is the default. Unit tests shouldn't depend on any shared state, and so should generally be runnable in parallel. If the tests fail in parallel, the first thing to do is to figure out why; do not just disable parallel tests! For functional tests it is reasonable to disable parallel tests."
  },
  "articles/docfx_getting_started.html": {
    "href": "articles/docfx_getting_started.html",
    "title": "Getting Started with docfx | CueX Documentation",
    "keywords": "Getting Started with docfx Getting Started This is a seed. docfx is an API documentation generator for .NET, currently support C# and VB. It has the ability to extract triple slash comments out from your source code. What's more, it has syntax to link additional files to API to add additional remarks. docfx will scan your source code and your additional conceptual files and generate a complete HTML documentation website for you. docfx provides the flexibility for you to customize the website through templates. We currently have several embedded templates, including websites containing pure static html pages and also website managed by AngularJS. Click \"View Source\" for an API to route to the source code in GitHub (your API must be pushed to GitHub) docfx provide DNX version for cross platform use. docfx can be used within Visual Studio seamlessly. NOTE offical docfx.msbuild nuget package is now in pre-release version. You can also build your own with source code and use it locally. We support Docfx Flavored Markdown(DFM) for writing conceptual files. DFM is 100% compatible with Github Flavored Markdown(GFM) and add several new features including file inclusion , cross reference , and yaml header ."
  },
  "articles/engineering_guidelines.html": {
    "href": "articles/engineering_guidelines.html",
    "title": "Engineering Guidelines | CueX Documentation",
    "keywords": "Engineering Guidelines Basics Copyright header and license notice All source code files require the following exact header according to its language (please do not make any changes to it). extension: .cs // Copyright (c) Microsoft. All rights reserved. // Licensed under the MIT license. See LICENSE file in the project root for full license information. extension: .js // Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See LICENSE file in the project root for full license information. extension: .css /* Copyright (c) Microsoft Corporation. All Rights Reserved. Licensed under the MIT License. See License.txt in the project root for license information. */ extension: .tmpl , .tmpl.partial {{!Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See LICENSE file in the project root for full license information.}} External dependencies This refers to dependencies on projects (i.e. NuGet packages) outside of the docfx repo, and especially outside of Microsoft. Adding new dependencies require additional approval. Current approved dependencies are: Newtonsoft.Json Jint HtmlAgilityPack Nustache YamlDotNet Code reviews and checkins To help ensure that only the highest quality code makes its way into the project, please submit all your code changes to GitHub as PRs. This includes runtime code changes, unit test updates, and deployment scripts. For example, sending a PR for just an update to a unit test might seem like a waste of time but the unit tests are just as important as the product code and as such, reviewing changes to them is also just as important. The advantages are numerous: improving code quality, more visibility on changes and their potential impact, avoiding duplication of effort, and creating general awareness of progress being made in various areas. In general a PR should be signed off(using the 👍 emoticon) by the Owner of that code. To commit the PR to the repo do not use the Big Green Button . Instead, do a typical push that you would use with Git (e.g. local pull, rebase, merge, push). Source Code Management Branch strategy In general: master has the code for the latest release on NuGet.org. (e.g. 1.0.0 , 1.1.0 ) dev has the code that is being worked on but not yet released. This is the branch into which devs normally submit pull requests and merge changes into. We run daily CI towards dev branch and generate pre-release nuget package, e.g. 1.0.1-alpha-9-abcdefsd . hotfix has the code for fixing master bug after it is released. hotfix changes will be merged back to master and dev once it is verified. Solution and project folder structure and naming Solution files go in the repo root. The default entry point is All.sln . Every project also needs a project.json and a matching .xproj file. This project.json is the source of truth for a project's dependencies and configuration options. Solution need to contain solution folders that match the physical folder ( src , test , tools , etc.). Assembly naming pattern The general naming pattern is Microsoft.DocAsCode.<area>.<subarea> . Unit tests We use xUnit.net for all unit testing. Coding Standards Please refer to C# Coding standards for detailed guideline for C# coding standards. TODO Template Coding standards TODO Template Preprocess JS Coding standards"
  },
  "api/CueX.API.html": {
    "href": "api/CueX.API.html",
    "title": "Namespace CueX.API | CueX Documentation",
    "keywords": "Namespace CueX.API Interfaces ISpatialGrain<T>"
  },
  "api/CueX.Core.SpatialGrain-2.html": {
    "href": "api/CueX.Core.SpatialGrain-2.html",
    "title": "Class SpatialGrain<TState, TPrecision> | CueX Documentation",
    "keywords": "Class SpatialGrain<TState, TPrecision> This is a class talking about CAT . NOTE This is a CAT class Refer to @CueX.Core.ISpatialGrain to see other animals. Inheritance System.Object SpatialGrain<TState, TPrecision> Implements ISpatialGrain <TPrecision> IGrainWithIntegerKey Namespace : CueX.Core Assembly : CueX.Core.dll Syntax public class SpatialGrain<TState, TPrecision> : Grain<TState>, ISpatialGrain<TPrecision>, IGrainWithIntegerKey where TState : SpatialGrainState<TPrecision>, new ()where TPrecision : struct Type Parameters Name Description TState TPrecision Remarks THIS is remarks overridden in MARKDWON file Methods | Improve this Doc View Source GetPosition() Declaration public Vector<TPrecision> GetPosition() Returns Type Description Vector <TPrecision> Implements ISpatialGrain<T> IGrainWithIntegerKey"
  },
  "api/CueX.Core.html": {
    "href": "api/CueX.Core.html",
    "title": "Namespace CueX.Core | CueX Documentation",
    "keywords": "Namespace CueX.Core Classes Setup SpatialGrain<TState, TPrecision> SpatialGrainState<TPrecision>"
  },
  "api/CueX.GridSPS.Class1.html": {
    "href": "api/CueX.GridSPS.Class1.html",
    "title": "Class Class1 | CueX Documentation",
    "keywords": "Class Class1 Inheritance System.Object Class1 Namespace : CueX.GridSPS Assembly : CueX.GridSPS.dll Syntax public class Class1 : object"
  },
  "api/CueX.Test.Helper.SiloCollection.html": {
    "href": "api/CueX.Test.Helper.SiloCollection.html",
    "title": "Class SiloCollection | CueX Documentation",
    "keywords": "Class SiloCollection Inheritance System.Object SiloCollection Namespace : CueX.Test.Helper Assembly : CueX.Test.dll Syntax public class SiloCollection : ICollectionFixture<SiloFixture> Fields | Improve this Doc View Source Name Declaration public const string Name = null Field Value Type Description System.String"
  },
  "api/CueX.Test.Helper.html": {
    "href": "api/CueX.Test.Helper.html",
    "title": "Namespace CueX.Test.Helper | CueX Documentation",
    "keywords": "Namespace CueX.Test.Helper Classes SiloCollection SiloFixture"
  }
}